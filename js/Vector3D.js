// Generated by CoffeeScript 1.3.3
var Vector3D;

Vector3D = (function() {

  function Vector3D(x, y, z) {
    this.x = x != null ? x : 0;
    this.y = y != null ? y : 0;
    this.z = z != null ? z : 0;
    this;

  }

  Vector3D.prototype.set = function(x, y, z) {
    this.x = x;
    this.y = y;
    this.z = z;
    return this;
  };

  Vector3D.prototype.setX = function(x) {
    this.x = x;
    return this;
  };

  Vector3D.prototype.setY = function(y) {
    this.y = y;
    return this;
  };

  Vector3D.prototype.setZ = function(z) {
    this.z = z;
    return this;
  };

  Vector3D.prototype.add = function(v) {
    this.x += v.x;
    this.y += v.y;
    this.z += v.z;
    return this;
  };

  Vector3D.prototype.addScalar = function(s) {
    this.x += s;
    this.y += s;
    this.z += s;
    return this;
  };

  Vector3D.prototype.sub = function(v) {
    this.x -= v.x;
    this.y -= v.y;
    this.z -= v.z;
    return this;
  };

  Vector3D.prototype.subScalar = function(s) {
    this.x -= s;
    this.y -= s;
    this.z -= s;
    return this;
  };

  Vector3D.prototype.multiply = function(v) {
    this.x *= v.x;
    this.y *= v.y;
    this.z *= v.z;
    return this;
  };

  Vector3D.prototype.multiplyScalar = function(s) {
    this.x *= s;
    this.y *= s;
    this.z *= s;
    return this;
  };

  Vector3D.prototype.divide = function(v) {
    this.x /= v.x;
    this.y /= v.y;
    this.z /= v.z;
    return this;
  };

  Vector3D.prototype.divideScalar = function(s) {
    if (s) {
      this.x /= s;
      this.y /= s;
      this.z /= s;
    } else {
      this.x = 0;
      this.y = 0;
      this.z = 0;
    }
    return this;
  };

  Vector3D.prototype.negate = function() {
    return this.multiplyScalar(-1);
  };

  Vector3D.prototype.dot = function(v) {
    return this.x * v.x + this.y * v.y + this.z * v.z;
  };

  Vector3D.prototype.lengthSq = function() {
    return this.x * this.x + this.y * this.y + this.z * this.z;
  };

  Vector3D.prototype.length = function() {
    return Math.sqrt(this.lengthSq());
  };

  Vector3D.prototype.lengthManhattan = function() {
    return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z);
  };

  Vector3D.prototype.normalize = function() {
    return this.divideScalar(this.length());
  };

  Vector3D.prototype.setLength = function(l) {
    if (l == null) {
      l = 1;
    }
    return this.normalize().multiplyScalar(l);
  };

  return Vector3D;

})();
